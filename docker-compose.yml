services:
  db:
    image: postgres:15
    container_name: db
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: always
    # networks:
    #   - ecom_network
    # healthcheck:
    #   test: ["CMD", "pg_isready", "-U", "dev_user"]
    #   interval: 5s
    #   timeout: 3s
    #   retries: 5

  adminer:
    image: adminer
    container_name: adminer
    ports:
      - "8080:8080"
    restart: always
    # networks:
    #   - ecom_network  # Ajoute adminer au réseau personnalisé

#   server:
#     build:
#       context: ./server
#     container_name: server
#     depends_on:
#       db:
#         condition: service_healthy
#     ports:
#       - "5001:3000"
#     volumes:
#       - server_data:/app
#     restart: always
#     networks:
#       - ecom_network  # Ajoute le serveur au réseau personnalisé

#   frontend:
#     build:
#       context: ./frontend
#       args:
#         VITE_API_URL: http://localhost:5001/api/v1
#     container_name: frontend
#     ports:
#       - "3000:80"
#     depends_on:
#       - server
#     restart: always
#     networks:
#       - ecom_network  # Ajoute le frontend au réseau personnalisé

volumes:
  postgres_data:
#   server_data:

# networks:
#   ecom_network:
#     driver: bridge  # Crée un réseau personnalisé avec le driver "bridge"
